{"version":3,"sources":["Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["defaultData","width","height","snake","headAngle","apples","field","Array","fill","Game","state","stopGame","alert","_this","setState","maxMap","cord","map","ifApple","x","y","Object","toConsumableArray","a","length","splice","appendSnake","axis","arguments","undefined","headX","headY","goSnake","prependSnake","onTop","e","onBottom","onRight","onLeft","this","console","info","shift","push","to","newCord","_this2","walkSnake","setInterval","_this3","document","addEventListener","keyCode","removeEventListener","_this$state","react_default","createElement","className","column","key","el","i","React","Component","App","src_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18fd645c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Game.css\";\n\nconst defaultData = {\n  width: 10,\n  height: 10,\n  snake: [[1, 1], [1, 2], [1, 3]],\n  headAngle: 3,\n  apples: [[2, 3], [8, 1], [7, 5], [4, 9]],\n  field: Array(10).fill(Array(10).fill(1))\n};\n\nclass Game extends React.Component {\n  state = defaultData;\n\n  stopGame = () => {\n    alert(\"Игра приостановлена!\");\n    this.setState(defaultData);\n  };\n\n  maxMap = cord => {\n    const map = this.state.width;\n    if (cord >= map) {\n      return 0;\n    } else if (cord < 0) {\n      return map;\n    }\n    return cord;\n  };\n\n  ifApple = (x, y) => {\n    let apples = [...this.state.apples];\n    for (let a = 0; a < apples.length; a++) {\n      if (x == apples[a][0] && y == apples[a][1]) {\n        apples.splice(a, 1);\n        this.setState({\n          apples: apples\n        });\n        return true;\n      }\n    }\n    return false;\n  };\n\n  goSnake(x, y) {\n    let { snake } = this.state;\n    x = this.maxMap(x);\n    y = this.maxMap(y);\n    if (this.ifApple(x, y)) {\n      console.info(\"apple\");\n    } else {\n      snake.shift();\n    }\n    snake.push([x, y]);\n    return snake;\n  }\n\n  appendSnake = (axis = \"x\") => {\n    let { snake } = this.state;\n    let { x, y } = 0;\n\n    let headX = snake[snake.length - 1][0];\n    let headY = snake[snake.length - 1][1];\n\n    if (axis === \"x\") {\n      x = headX + 1;\n      y = headY;\n    } else if (axis === \"y\") {\n      x = headX;\n      y = headY + 1;\n    }\n\n    return this.goSnake(x, y);\n  };\n\n  prependSnake = (axis = \"x\") => {\n    let { snake } = this.state;\n    let { x, y } = 0;\n\n    let headX = snake[snake.length - 1][0];\n    let headY = snake[snake.length - 1][1];\n\n    if (axis === \"x\") {\n      x = headX - 1;\n      y = headY;\n    } else if (axis === \"y\") {\n      x = headX;\n      y = headY - 1;\n    }\n\n    return this.goSnake(x, y);\n  };\n\n  walkSnake(to = 3) {\n    const { snake } = this.state;\n    let newCord = [];\n\n    if (to === 3) {\n      newCord = this.appendSnake(\"x\");\n    } else if (to === 9) {\n      newCord = this.prependSnake(\"x\");\n    } else if (to === 6) {\n      newCord = this.appendSnake(\"y\");\n    } else if (to === 12) {\n      newCord = this.prependSnake(\"y\");\n    }\n    this.setState({\n      snake: newCord\n    });\n  }\n\n  onTop = e => {\n    this.setState({\n      headAngle: 12\n    });\n  };\n\n  onBottom = e => {\n    this.setState({\n      headAngle: 6\n    });\n  };\n\n  onRight = e => {\n    this.setState({\n      headAngle: 3\n    });\n  };\n\n  onLeft = e => {\n    this.setState({\n      headAngle: 9\n    });\n    // this.walkSnake(this.state.headAngle);\n  };\n  componentDidMount() {\n    this.walkSnake(this.state.headAngle);\n    setInterval(() => {\n      this.walkSnake(this.state.headAngle);\n\n      if (this.state.apples.length === 0 && this.state.snake.length >= 9) {\n        this.stopGame();\n      }\n    }, 500);\n  }\n\n  componentWillMount() {\n    document.addEventListener(\"keydown\", e => {\n      const { keyCode } = e;\n      if (keyCode === 38) {\n        this.onTop();\n      } else if (keyCode === 40) {\n        this.onBottom();\n      } else if (keyCode === 39) {\n        this.onRight();\n      } else if (keyCode === 37) {\n        this.onLeft();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", e => {});\n  }\n\n  render() {\n    let { snake, field, apples } = this.state;\n    return (\n      <div className=\"stock\">\n        {field.map((column, y) => {\n          return (\n            <div className=\"row\" key={y}>\n              {column.map((el, x) => {\n                for (let i = 0; i < snake.length; i++) {\n                  if (x === snake[i][0] && y === snake[i][1]) {\n                    return <span key={x} className=\"box active\" />;\n                  }\n                }\n                for (let a = 0; a < apples.length; a++) {\n                  if (x === apples[a][0] && y === apples[a][1]) {\n                    return <span key={x} className=\"box apple\" />;\n                  }\n                }\n                return <span className=\"box\" key={x} />;\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./Game/Game\"\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Game\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}